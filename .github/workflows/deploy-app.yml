name: "Deploy App"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "The environment to deploy to"
      app:
        required: true
        type: string
        description: "The app to deploy"

jobs:
  deploy:
    # TODO: Review or not, doesn't matter
    name: Deploy App
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: https://${{ vars.TENANT}}.${{ inputs.app }}.demo.nerdware.dev
    env:
      TENANT: ${{ vars.TENANT}}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      PR_NUMBER: ${{ github.event.number }}
      # Needed for terragrunt to disinguish different environments
      APP: ${{ inputs.app }}
      TENANT_APP: ${{ vars.TENANT}}-${{ inputs.app }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: 0.55.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Apply Terraform
        # terragrunt apply -auto-approve
        run: |
          cd infrastructure/tenants/$TENANT
          terragrunt run-all apply --terragrunt-non-interactive

      - name: Deploy to ECS
        run: |
          export ECR=$AWS_ACCOUNT_ID.dkr.ecr.eu-central-1.amazonaws.com/$TENANT_APP-ecr
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR

          docker build -t "$ECR":latest -f ./backend/Dockerfile ./backend
          docker push "$ECR":latest

          aws ecs update-service --cluster $TENANT_APP-cluster \
            --service arn:aws:ecs:eu-central-1:"$AWS_ACCOUNT_ID":service/$TENANT_APP-service \
            --region eu-central-1 \
            --force-new-deployment > /dev/null

      - name: Deploy Frontend
        run: |
          cd ./frontend
          npm install

          echo "NEXT_PUBLIC_API_URL='https://api.$TENANT.$APP.demo.nerdware.dev'" >> .env.local

          npm run build
          aws s3 sync ./out s3://$TENANT_APP-frontend-bucket --delete
